{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static WIN_NUMBER = 2048;\n    static STATUS_PLAYING = \"playing\";\n    static STATUS_IDLE = \"idle\";\n    static STATUS_LOSE = \"lose\";\n    static STATUS_WIN = \"win\";\n    static DEFAULT_STATE = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    constructor(initialState = $a5fd07fa01589658$var$Game.DEFAULT_STATE){\n        this.initialState = initialState;\n        this.state = this.deepCloneArray(this.initialState);\n        this.status = $a5fd07fa01589658$var$Game.STATUS_IDLE;\n        this.score = 0;\n    }\n    deepCloneArray(arr) {\n        return arr.map((row)=>[\n                ...row\n            ]);\n    }\n    moveLeft() {\n        // [2, 2, 4, 0]\n        if (this.status === $a5fd07fa01589658$var$Game.STATUS_WIN || this.status === $a5fd07fa01589658$var$Game.STATUS_LOSE || this.status === $a5fd07fa01589658$var$Game.STATUS_IDLE) return;\n        const prevState = JSON.stringify(this.state);\n        for(let i = 0; i < this.state.length; i++){\n            let row = this.state[i].filter((val)=>val !== 0); // [2, 2, 4]\n            for(let j = 0; j < row.length - 1; j++)if (row[j] === row[j + 1]) {\n                row[j] *= 2;\n                row[j + 1] = 0; // [4, 0, 4]\n                if (row[j] === $a5fd07fa01589658$var$Game.WIN_NUMBER) this.status = $a5fd07fa01589658$var$Game.STATUS_WIN;\n                this.score += row[j];\n            }\n            row = row.filter((val)=>val !== 0); // [4, 4]\n            while(row.length < this.state[i].length)row.push(0);\n             // [4, 4, 0, 0]\n            this.state[i] = row;\n        }\n        if (prevState !== JSON.stringify(this.state)) this.addRandomTile();\n        if (!this.movesAvailable()) this.status = $a5fd07fa01589658$var$Game.STATUS_LOSE;\n    }\n    moveRight() {\n        if (this.status === $a5fd07fa01589658$var$Game.STATUS_WIN || this.status === $a5fd07fa01589658$var$Game.STATUS_LOSE || this.status === $a5fd07fa01589658$var$Game.STATUS_IDLE) return;\n        const prevState = JSON.stringify(this.state);\n        // [0, 4, 2, 2]\n        for(let i = 0; i < this.state.length; i++){\n            let row = this.state[i].filter((val)=>val !== 0); // [4, 2, 2]\n            for(let j = row.length - 1; j > 0; j--)if (row[j] === row[j - 1]) {\n                row[j] *= 2;\n                row[j - 1] = 0;\n                if (row[j] === $a5fd07fa01589658$var$Game.WIN_NUMBER) this.status = $a5fd07fa01589658$var$Game.STATUS_WIN;\n                this.score += row[j]; // [4, 0, 4]\n            }\n            row = row.filter((val)=>val !== 0); // [4, 4]\n            while(row.length < this.state[i].length)row.unshift(0);\n             // [0, 0, 4, 4]\n            this.state[i] = row;\n        }\n        if (prevState !== JSON.stringify(this.state)) this.addRandomTile();\n        if (!this.movesAvailable()) this.status = $a5fd07fa01589658$var$Game.STATUS_LOSE;\n    }\n    moveUp() {\n        if (this.status === $a5fd07fa01589658$var$Game.STATUS_WIN || this.status === $a5fd07fa01589658$var$Game.STATUS_LOSE || this.status === $a5fd07fa01589658$var$Game.STATUS_IDLE) return;\n        const prevState = JSON.stringify(this.state);\n        for(let col = 0; col < this.state[0].length; col++){\n            let column = [];\n            for(let row = 0; row < this.state.length; row++)if (this.state[row][col] !== 0) column.push(this.state[row][col]);\n            for(let i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n                column[i] *= 2;\n                column[i + 1] = 0;\n                if (column[i] === $a5fd07fa01589658$var$Game.WIN_NUMBER) this.status = $a5fd07fa01589658$var$Game.STATUS_WIN;\n                this.score += column[i];\n            }\n            column = column.filter((val)=>val !== 0);\n            while(column.length < this.state.length)column.push(0);\n            for(let row = 0; row < this.state.length; row++)this.state[row][col] = column[row];\n        }\n        if (prevState !== JSON.stringify(this.state)) this.addRandomTile();\n        if (!this.movesAvailable()) this.status = $a5fd07fa01589658$var$Game.STATUS_LOSE;\n    }\n    moveDown() {\n        if (this.status === $a5fd07fa01589658$var$Game.STATUS_WIN || this.status === $a5fd07fa01589658$var$Game.STATUS_LOSE || this.status === $a5fd07fa01589658$var$Game.STATUS_IDLE) return;\n        const prevState = JSON.stringify(this.state);\n        for(let col = 0; col < this.state[0].length; col++){\n            let column = [];\n            for(let row = 0; row < this.state.length; row++)if (this.state[row][col] !== 0) column.push(this.state[row][col]);\n            for(let i = column.length - 1; i > 0; i--)if (column[i] === column[i - 1]) {\n                column[i] *= 2;\n                column[i - 1] = 0;\n                if (column[i] === $a5fd07fa01589658$var$Game.WIN_NUMBER) this.status = $a5fd07fa01589658$var$Game.STATUS_WIN;\n                this.score += column[i];\n            }\n            column = column.filter((val)=>val !== 0);\n            while(column.length < this.state.length)column.unshift(0);\n            for(let row = 0; row < this.state.length; row++)this.state[row][col] = column[row];\n        }\n        if (prevState !== JSON.stringify(this.state)) this.addRandomTile();\n        if (!this.movesAvailable()) this.status = $a5fd07fa01589658$var$Game.STATUS_LOSE;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS_PLAYING;\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    restart() {\n        this.state = this.deepCloneArray(this.initialState);\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.STATUS_IDLE;\n    }\n    addRandomTile() {\n        const emptyTiles = [];\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyTiles.push({\n                x: i,\n                y: j\n            });\n        }\n        const randomIndex = Math.floor(Math.random() * emptyTiles.length);\n        const { x: x, y: y } = emptyTiles[randomIndex];\n        this.state[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n    movesAvailable() {\n        for(let i = 0; i < this.state.length; i++)for(let j = 0; j < this.state[i].length; j++){\n            if (this.state[i][j] === 0) return true;\n            if (i > 0 && this.state[i][j] === this.state[i - 1][j]) return true;\n            if (i < this.state.length - 1 && this.state[i][j] === this.state[i + 1][j]) return true;\n            if (j > 0 && this.state[i][j] === this.state[i][j - 1]) return true;\n            if (j < this.state[i].length - 1 && this.state[i][j] === this.state[i][j + 1]) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$fieldCells = document.querySelectorAll(\".field-cell\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$button.classList.toggle(\"start\");\n    $09e991522ca7e64e$var$button.classList.toggle(\"restart\");\n    if ($09e991522ca7e64e$var$button.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$updateGame();\n        document.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyPress);\n    } else {\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$updateGame();\n    }\n});\nfunction $09e991522ca7e64e$var$handleKeyPress(e) {\n    switch(e.key){\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$updateGame();\n}\nfunction $09e991522ca7e64e$var$updateGame() {\n    $09e991522ca7e64e$var$updateScore();\n    $09e991522ca7e64e$var$updateBoard();\n    $09e991522ca7e64e$var$updateMessage();\n}\nfunction $09e991522ca7e64e$var$updateScore() {\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n}\nfunction $09e991522ca7e64e$var$updateBoard() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    for(let i = 0; i < state.length; i++)for(let j = 0; j < state[i].length; j++){\n        const cell = $09e991522ca7e64e$var$fieldCells[i * state.length + j];\n        cell.textContent = state[i][j] === 0 ? \"\" : state[i][j];\n        cell.className = \"field-cell\";\n        if (state[i][j] !== 0) cell.classList.add(`field-cell--${state[i][j]}`);\n    }\n}\nfunction $09e991522ca7e64e$var$updateMessage() {\n    const statusGame = $09e991522ca7e64e$var$game.getStatus();\n    const messageContainer = document.querySelector(\".message-container\");\n    const messages = messageContainer.querySelectorAll(\".message\");\n    messages.forEach((message)=>message.classList.add(\"hidden\"));\n    if (statusGame === $a5fd07fa01589658$exports.STATUS_LOSE) messageContainer.querySelector(\".message-lose\").classList.remove(\"hidden\");\n    else if (statusGame === $a5fd07fa01589658$exports.STATUS_WIN) messageContainer.querySelector(\".message-win\").classList.remove(\"hidden\");\n    else if (statusGame === $a5fd07fa01589658$exports.STATUS_IDLE) messageContainer.querySelector(\".message-start\").classList.remove(\"hidden\");\n}\n\n\n//# sourceMappingURL=index.76816a63.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst button = document.querySelector('.button');\nconst scoreElement = document.querySelector('.game-score');\nconst fieldCells = document.querySelectorAll('.field-cell');\n\nbutton.addEventListener('click', () => {\n  button.classList.toggle('start');\n  button.classList.toggle('restart');\n\n  if (button.classList.contains('restart')) {\n    button.textContent = 'Restart';\n\n    game.start();\n    updateGame();\n\n    document.addEventListener('keydown', handleKeyPress);\n  } else {\n    button.textContent = 'Start';\n\n    game.restart();\n    updateGame();\n  }\n});\n\nfunction handleKeyPress(e) {\n  switch (e.key) {\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    default:\n      return;\n  }\n\n  updateGame();\n}\n\nfunction updateGame() {\n  updateScore();\n  updateBoard();\n  updateMessage();\n}\n\nfunction updateScore() {\n  scoreElement.textContent = game.getScore();\n}\n\nfunction updateBoard() {\n  const state = game.getState();\n\n  for (let i = 0; i < state.length; i++) {\n    for (let j = 0; j < state[i].length; j++) {\n      const cell = fieldCells[i * state.length + j];\n\n      cell.textContent = state[i][j] === 0 ? '' : state[i][j];\n      cell.className = 'field-cell';\n\n      if (state[i][j] !== 0) {\n        cell.classList.add(`field-cell--${state[i][j]}`);\n      }\n    }\n  }\n}\n\nfunction updateMessage() {\n  const statusGame = game.getStatus();\n  const messageContainer = document.querySelector('.message-container');\n  const messages = messageContainer.querySelectorAll('.message');\n\n  messages.forEach((message) => message.classList.add('hidden'));\n\n  if (statusGame === Game.STATUS_LOSE) {\n    messageContainer.querySelector('.message-lose').classList.remove('hidden');\n  } else if (statusGame === Game.STATUS_WIN) {\n    messageContainer.querySelector('.message-win').classList.remove('hidden');\n  } else if (statusGame === Game.STATUS_IDLE) {\n    messageContainer.querySelector('.message-start').classList.remove('hidden');\n  }\n}\n","'use strict';\n\nclass Game {\n  static WIN_NUMBER = 2048;\n  static STATUS_PLAYING = 'playing';\n  static STATUS_IDLE = 'idle';\n  static STATUS_LOSE = 'lose';\n  static STATUS_WIN = 'win';\n  static DEFAULT_STATE = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  constructor(initialState = Game.DEFAULT_STATE) {\n    this.initialState = initialState;\n    this.state = this.deepCloneArray(this.initialState);\n    this.status = Game.STATUS_IDLE;\n    this.score = 0;\n  }\n\n  deepCloneArray(arr) {\n    return arr.map((row) => [...row]);\n  }\n\n  moveLeft() {\n    // [2, 2, 4, 0]\n    if (\n      this.status === Game.STATUS_WIN ||\n      this.status === Game.STATUS_LOSE ||\n      this.status === Game.STATUS_IDLE\n    ) {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.state);\n\n    for (let i = 0; i < this.state.length; i++) {\n      let row = this.state[i].filter((val) => val !== 0); // [2, 2, 4]\n\n      for (let j = 0; j < row.length - 1; j++) {\n        if (row[j] === row[j + 1]) {\n          row[j] *= 2;\n          row[j + 1] = 0; // [4, 0, 4]\n\n          if (row[j] === Game.WIN_NUMBER) {\n            this.status = Game.STATUS_WIN;\n          }\n\n          this.score += row[j];\n        }\n      }\n\n      row = row.filter((val) => val !== 0); // [4, 4]\n\n      while (row.length < this.state[i].length) {\n        row.push(0);\n      } // [4, 4, 0, 0]\n\n      this.state[i] = row;\n    }\n\n    if (prevState !== JSON.stringify(this.state)) {\n      this.addRandomTile();\n    }\n\n    if (!this.movesAvailable()) {\n      this.status = Game.STATUS_LOSE;\n    }\n  }\n\n  moveRight() {\n    if (\n      this.status === Game.STATUS_WIN ||\n      this.status === Game.STATUS_LOSE ||\n      this.status === Game.STATUS_IDLE\n    ) {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.state);\n\n    // [0, 4, 2, 2]\n    for (let i = 0; i < this.state.length; i++) {\n      let row = this.state[i].filter((val) => val !== 0); // [4, 2, 2]\n\n      for (let j = row.length - 1; j > 0; j--) {\n        if (row[j] === row[j - 1]) {\n          row[j] *= 2;\n          row[j - 1] = 0;\n\n          if (row[j] === Game.WIN_NUMBER) {\n            this.status = Game.STATUS_WIN;\n          }\n\n          this.score += row[j]; // [4, 0, 4]\n        }\n      }\n\n      row = row.filter((val) => val !== 0); // [4, 4]\n\n      while (row.length < this.state[i].length) {\n        row.unshift(0);\n      } // [0, 0, 4, 4]\n\n      this.state[i] = row;\n    }\n\n    if (prevState !== JSON.stringify(this.state)) {\n      this.addRandomTile();\n    }\n\n    if (!this.movesAvailable()) {\n      this.status = Game.STATUS_LOSE;\n    }\n  }\n\n  moveUp() {\n    if (\n      this.status === Game.STATUS_WIN ||\n      this.status === Game.STATUS_LOSE ||\n      this.status === Game.STATUS_IDLE\n    ) {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.state);\n\n    for (let col = 0; col < this.state[0].length; col++) {\n      let column = [];\n\n      for (let row = 0; row < this.state.length; row++) {\n        if (this.state[row][col] !== 0) {\n          column.push(this.state[row][col]);\n        }\n      }\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          column[i + 1] = 0;\n\n          if (column[i] === Game.WIN_NUMBER) {\n            this.status = Game.STATUS_WIN;\n          }\n\n          this.score += column[i];\n        }\n      }\n\n      column = column.filter((val) => val !== 0);\n\n      while (column.length < this.state.length) {\n        column.push(0);\n      }\n\n      for (let row = 0; row < this.state.length; row++) {\n        this.state[row][col] = column[row];\n      }\n    }\n\n    if (prevState !== JSON.stringify(this.state)) {\n      this.addRandomTile();\n    }\n\n    if (!this.movesAvailable()) {\n      this.status = Game.STATUS_LOSE;\n    }\n  }\n\n  moveDown() {\n    if (\n      this.status === Game.STATUS_WIN ||\n      this.status === Game.STATUS_LOSE ||\n      this.status === Game.STATUS_IDLE\n    ) {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.state);\n\n    for (let col = 0; col < this.state[0].length; col++) {\n      let column = [];\n\n      for (let row = 0; row < this.state.length; row++) {\n        if (this.state[row][col] !== 0) {\n          column.push(this.state[row][col]);\n        }\n      }\n\n      for (let i = column.length - 1; i > 0; i--) {\n        if (column[i] === column[i - 1]) {\n          column[i] *= 2;\n          column[i - 1] = 0;\n\n          if (column[i] === Game.WIN_NUMBER) {\n            this.status = Game.STATUS_WIN;\n          }\n\n          this.score += column[i];\n        }\n      }\n\n      column = column.filter((val) => val !== 0);\n\n      while (column.length < this.state.length) {\n        column.unshift(0);\n      }\n\n      for (let row = 0; row < this.state.length; row++) {\n        this.state[row][col] = column[row];\n      }\n    }\n\n    if (prevState !== JSON.stringify(this.state)) {\n      this.addRandomTile();\n    }\n\n    if (!this.movesAvailable()) {\n      this.status = Game.STATUS_LOSE;\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.STATUS_PLAYING;\n\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  restart() {\n    this.state = this.deepCloneArray(this.initialState);\n    this.score = 0;\n    this.status = Game.STATUS_IDLE;\n  }\n\n  addRandomTile() {\n    const emptyTiles = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          emptyTiles.push({ x: i, y: j });\n        }\n      }\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyTiles.length);\n    const { x, y } = emptyTiles[randomIndex];\n\n    this.state[x][y] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  movesAvailable() {\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          return true;\n        }\n\n        if (i > 0 && this.state[i][j] === this.state[i - 1][j]) {\n          return true;\n        }\n\n        if (\n          i < this.state.length - 1 &&\n          this.state[i][j] === this.state[i + 1][j]\n        ) {\n          return true;\n        }\n\n        if (j > 0 && this.state[i][j] === this.state[i][j - 1]) {\n          return true;\n        }\n\n        if (\n          j < this.state[i].length - 1 &&\n          this.state[i][j] === this.state[i][j + 1]\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","WIN_NUMBER","STATUS_PLAYING","STATUS_IDLE","STATUS_LOSE","STATUS_WIN","DEFAULT_STATE","constructor","initialState","state","deepCloneArray","status","score","arr","map","row","moveLeft","prevState","JSON","stringify","i","length","filter","val","j","push","addRandomTile","movesAvailable","moveRight","unshift","moveUp","col","column","moveDown","getScore","getState","getStatus","start","restart","emptyTiles","x","y","randomIndex","Math","floor","random","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$fieldCells","querySelectorAll","$09e991522ca7e64e$var$handleKeyPress","e","key","$09e991522ca7e64e$var$updateGame","textContent","$09e991522ca7e64e$var$updateBoard","cell","className","classList","add","$09e991522ca7e64e$var$updateMessage","statusGame","messageContainer","messages","forEach","message","remove","addEventListener","toggle","contains"],"version":3,"file":"index.76816a63.js.map"}